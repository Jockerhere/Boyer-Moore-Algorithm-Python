def indexer(main_text: str) -> dict:
    """This function utilizes the Boyer-Moore algorithm to locate the specified phrases that users are searching for."""
    alphabets_dict = {}
    for index_, char in enumerate(main_text):

        if char.isalpha() == True:
            if char.lower() not in alphabets_dict.keys():

                alphabets_dict[char.lower()] = []
                alphabets_dict[char.lower()].append(index_)

            else:
                alphabets_dict[char.lower()].append(index_)

            if index_ + 1 < len(main_text) and main_text[index_ + 1].isalpha() == True:
                if (char.lower() + main_text[index_ + 1]) not in alphabets_dict.keys():
                    alphabets_dict[(char.lower() + main_text[index_ + 1])] = []
                    alphabets_dict[(char.lower() + main_text[index_ + 1])].append(index_)


                else:
                    alphabets_dict[(char.lower() + main_text[index_ + 1])].append(index_)


    return alphabets_dict


def searchInText(main_text: str, phrase: str, alphabets_dict: dict) -> list:  # The "alphabets_dict" was generated by the indexer function applied to our main_text. This was established in an earlier step.
    locations = []

    if len(phrase) < 2:
        if phrase.lower() in alphabets_dict.keys():
            return alphabets_dict[phrase.lower()]

        else:
            return locations

    elif phrase[:2].lower() in alphabets_dict.keys():
        for indexer_loc in alphabets_dict[phrase[:2].lower()]:  # Move to the indexes collected in our indexer dictionary for the first character of the phrase(phrase[0] char).
            if main_text[indexer_loc:indexer_loc + len(phrase)].lower() == phrase.lower():
                locations.append([indexer_loc, indexer_loc + len(phrase) - 1])


    else:
        for indexer_loc in alphabets_dict[phrase[0].lower()]:  # Move to the indexes collected in our indexer dictionary for the first character of the phrase(phrase[0] char).

            if main_text[indexer_loc:indexer_loc + len(phrase)].lower() == phrase.lower():
                locations.append([indexer_loc, indexer_loc + len(phrase) - 1])

    return locations

def show_in_text(main_text: str, phrase: str)-> str:
    phrase_locs = searchInText(main_text, phrase, indexer(main_text))

    for i in range(len(phrase_locs)):
        loc = phrase_locs[i]
        main_text = main_text[:loc[0]] + '"' + main_text[loc[0]:loc[1] + 1] + '"' + main_text[loc[1] + 1:]

        for j in range(i, len(phrase_locs)):
            phrase_locs[j][0] += 2
            phrase_locs[j][1] += 2

    return main_text
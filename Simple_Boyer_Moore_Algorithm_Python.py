"This function utilizes the Boyer-Moore algorithm to locate the specified phrases that users are searching for."
def indexer(main_text: str)-> dict:
    alphabets_dict = {}
    for index_, char in enumerate(main_text):
        # print(index_, char)
        if char.isalpha() == True:
            if char.lower() not in alphabets_dict.keys():
                alphabets_dict[char.lower()] = []
                alphabets_dict[char.lower()].append(index_)

            else:
                alphabets_dict[char.lower()].append(index_)

        else:
            pass

    return alphabets_dict


def SearchInText(main_text: str, phrase: str, alphabets_dict: dict)->list: # The "alphabets_dict" was generated by the indexer function applied to our main_text. This was established in an earlier step.
    locations = []

    for indexer_loc in alphabets_dict[phrase[0].lower()]: # Move to the indexes collected in our indexer dictionary for the first character of the phrase(phrase[0] char).
        # for counter in range(len(phrase)):
        if main_text[indexer_loc:indexer_loc + len(phrase)].lower() != phrase.lower():
            pass

        else:
             locations.append(indexer_loc)

    return locations